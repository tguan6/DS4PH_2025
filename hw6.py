# -*- coding: utf-8 -*-
"""hw6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fjuNpR9aBCrQQzU0oyM4CorwVTRmKcox
"""


# prompt: # Homework 6
# 1. Create a body mass index calculator app. It should take in height
#    in feet or meters and weight in lbs or kilograms and return the
#    associated body mass index. Post both the python code for your streamlit
#    app and a gif screen capture of it running.

import streamlit as st

def calculate_bmi(height, weight, height_unit, weight_unit):
    if height_unit == "feet":
        height = height * 0.3048  # Convert feet to meters
    if weight_unit == "lbs":
        weight = weight * 0.453592  # Convert lbs to kilograms

    bmi = weight / (height ** 2)
    return bmi

st.title("Body Mass Index (BMI) Calculator")

st.write("Please enter your height and weight:")

height = st.number_input("Height", min_value=0.0)
height_unit = st.selectbox("Height Unit", ["meters", "feet"])
weight = st.number_input("Weight", min_value=0.0)
weight_unit = st.selectbox("Weight Unit", ["kilograms", "lbs"])

if st.button("Calculate BMI"):
    bmi = calculate_bmi(height, weight, height_unit, weight_unit)
    st.write(f"Your BMI is: {bmi:.2f}")

    if bmi < 18.5:
      st.write("You are underweight.")
    elif 18.5 <= bmi < 25:
      st.write("You are normal weight.")
    elif 25 <= bmi < 30:
      st.write("You are overweight.")
    else:
      st.write("You are obese.")



import streamlit as st
import folium

# Set the title of the app
st.title("Location Map")

# Add input fields in the sidebar
with st.sidebar:
    st.write("Enter coordinates:")
    lat = st.number_input("Latitude", min_value=-90.0, max_value=90.0, value=0.0)
    lon = st.number_input("Longitude", min_value=-180.0, max_value=180.0, value=0.0)

# Create a Folium map centered at the user-specified coordinates
m = folium.Map(location=[lat, lon], zoom_start=10)

# Add a marker at the specified location with a popup
folium.Marker([lat, lon], popup="Your location").add_to(m)

# Display the map in the Streamlit app using HTML component
st.components.v1.html(m._repr_html_(), width=700, height=500)

import pandas as pd

# Function to scrape and clean GDP data from Wikipedia
def get_gdp_data():
    url = "https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)"
    tables = pd.read_html(url)

    # Extract tables
    imf_df = tables[0]  # IMF table
    wb_df = tables[1]   # World Bank table
    un_df = tables[2]   # UN table

    # Clean IMF and World Bank DataFrames (drop 'Rank' if present)
    imf_df = imf_df.drop(columns=['Rank'], errors='ignore')
    wb_df = wb_df.drop(columns=['Rank'], errors='ignore')

    # Flatten UN DataFrame multi-level columns
    un_df.columns = ['_'.join(col).strip() if isinstance(col, tuple) else col for col in un_df.columns]
    # Select and rename relevant columns
    un_df = un_df[['Country/Territory_Country/Territory', 'United Nations[14]_Estimate']]
    un_df = un_df.rename(columns={
        'Country/Territory_Country/Territory': 'Country/Territory',
        'United Nations[14]_Estimate': 'GDP'
    })  # Reassign to avoid view/copy issues

    # Clean GDP columns across all DataFrames
    for df in [imf_df, wb_df, un_df]:
        if 'GDP' in df.columns:
            # Remove brackets and commas
            df['GDP'] = df['GDP'].str.replace(r"\[.*\]", "", regex=True).str.replace(",", "")
            # Convert to float, coercing non-numeric values to NaN
            df['GDP'] = pd.to_numeric(df['GDP'], errors='coerce')

    return imf_df, wb_df, un_df

# Example usage in main()
def main():
    imf_df, wb_df, un_df = get_gdp_data()
    # Proceed with merging, plotting, etc.
    print("IMF DataFrame:\n", imf_df.head())
    print("World Bank DataFrame:\n", wb_df.head())
    print("UN DataFrame:\n", un_df.head())

if __name__ == "__main__":
    main()
